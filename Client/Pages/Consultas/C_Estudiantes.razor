@page "/ConsultaVentas"
@inject HttpClient httpClient
@inject NotificationService notify

<div class="input-group d-flex align-items-end">

    <div class="input-group" style="margin-right: 30px; width: 16rem;">
        <span class="input-group-text">Filtro</span>
        <InputSelect class="form-select text-14 col-3" @bind-Value="Filtro">
            <option value="1" selected>ID</option>
            <option value="2">Nombre</option>
        </InputSelect>
    </div>

    <div class="input-group" style=" margin-right: 10px; width: 15rem;">
        <span class="input-group-text">Desde</span>
        <InputDate @bind-Value="FechaInicial" class="form-control col-4" />
    </div>

    <div class="input-group" style=" width: 15rem;">
        <span class="input-group-text">Hasta</span>
        <InputDate @bind-Value="FechaFinal" class="form-control col-4" />
    </div>

    <div class="flex-fill mx-2">
        <div class="input-group">
            <span class="input-group-text">Busqueda</span>
            <input type="text" class="form-control" value="@Criterio" @oninput="ActualizarCriterio"/>
        </div>
    </div>

    <button type="button" style="z-index:0;" class="btn btn-primary" @onclick="Buscar">
        <i class="oi oi-magnifying-glass mr-2" /> Buscar
    </button>
</div>

@if (VentasMostradas != null)
{
    <table class="table table-bordered">
        <thead>
            <th>Compra ID</th>
            <th>Fecha de Compra</th>
            <th>Nombre</th>
            <th></th>
        </thead>

        <tbody>
            @foreach (var item in VentasMostradas)
            {
                <tr>
                    <th>@item.VentaId</th>
                    <th>@item.FechaDeCompra.ToString("dd/MM/yyyy")</th>
                    <th>@item.Nombre</th>
                    <th><a href="RegistroEstudiantes/@item.VentaId"><span class="oi oi-eye"></span></a></th>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    public int Conteo { get; set; }
    public int Filtro { get; set; }
    public string? Criterio { get; set; }
    public Ventas ventas { get; set; } = new Ventas();
    public List<Ventas> L_Ventas { get; set; } = new List<Ventas>();
    public List<Ventas> VentasMostradas { get; set; } = new List<Ventas>();
    public DateTime FechaInicial { get; set; } = DateTime.Now.AddMonths(-1);
    public DateTime FechaFinal { get; set; } = DateTime.Now;
    private CancellationTokenSource? cancellationTokenSource;
    private TimeSpan retrasoDeBusqueda = TimeSpan.FromMilliseconds(200);

    protected override async Task OnInitializedAsync()
    {
        var venta = await httpClient.GetFromJsonAsync<List<Ventas>>($"api/Ventas");

        if(venta is not null)
        {
            L_Ventas = venta;
            VentasMostradas = L_Ventas;
        }
    }

    public void Buscar()
    {
        if(FechaFinal < FechaInicial)
        {
            notify.ShowNotification(titulo: "Error", mensaje: "La fecha final no puede ser mayor a la fecha inicial", NotificationSeverity.Warning);
            return;
        }

        if (!String.IsNullOrEmpty(Criterio))
        {
            switch (Filtro)
            {
                case 1:
                    {
                        if(int.TryParse(Criterio, out int ID))
                        {
                            VentasMostradas = L_Ventas.Where(v => v.VentaId == ID).ToList();
                        }
                        else
                        {
                            notify.ShowNotification(titulo: "Error", mensaje: "El criterio de busqueda para la venta debe ser un numero valido", NotificationSeverity.Error);
                        }
                        break;
                    }

                case 2:
                    {
                        if(!int.TryParse(Criterio, out _))
                        {
                            VentasMostradas = L_Ventas.Where(n => n.Nombre != null && n.Nombre.ToLower().Contains(Criterio.ToLower())).ToList();
                        }
                        else
                        {
                            notify.ShowNotification(titulo: "Error", mensaje: "El criterio de busqueda para nombre no puede ser un numero", NotificationSeverity.Error);
                        }
                        break;
                    }
            }
        }
        else
        {
            VentasMostradas = L_Ventas;
        }

        Conteo = L_Ventas != null ? L_Ventas!.Count() : 0;
        StateHasChanged();
    }

    private void ActualizarCriterio(ChangeEventArgs e)
    {
        Criterio = e.Value?.ToString();

        cancellationTokenSource?.Cancel();
        cancellationTokenSource = new CancellationTokenSource();
        var token = cancellationTokenSource.Token;
        _ = Task.Delay(retrasoDeBusqueda, token).ContinueWith(_ => Buscar(), token);
    }
}