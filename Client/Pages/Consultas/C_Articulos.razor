@page "/ConsultaArticulos"
@inject HttpClient httpClient
@inject NotificationService notify

<div class="input-group d-flex align-items-end">

    <div class="input-group" style="margin-right: 30px; width: 16rem;">
        <span class="input-group-text">Filtro</span>
        <InputSelect class="form-select text-14 col-3" @bind-Value="Filtro">
            <option value="1" selected>ID</option>
            <option value="2">Descripci&oacute;n</option>
            <option value="3">Precio</option>
            <option value="4">Existencia</option>
            <option value="5">Categoria</option>
        </InputSelect>
    </div>

    <div class="input-group" style=" margin-right: 10px; width: 15rem;">
        <span class="input-group-text">Desde</span>
        <InputDate @bind-Value="FechaInicial" class="form-control col-4" />
    </div>

    <div class="input-group" style=" width: 15rem;">
        <span class="input-group-text">Hasta</span>
        <InputDate @bind-Value="FechaFinal" class="form-control col-4" />
    </div>

    <div class="flex-fill mx-2">
        <div class="input-group">
            <span class="input-group-text">Busqueda</span>
            <input type="text" class="form-control" value="@Criterio" @oninput="ActualizarCriterio"/>
        </div>
    </div>

    <button type="button" style="z-index:0;" class="btn btn-primary" @onclick="Buscar">
        <i class="oi oi-magnifying-glass mr-2" /> Buscar
    </button>
</div>

@if (ArticulosMostrados != null)
{
    <table class="table table-bordered">
        <thead>
            <th>Imagen</th>
            <th>Articulo ID</th>
            <th>Descripcion</th>
            <th>Fecha</th>
            <th>Precio</th>
            <th>Existencia</th>
            <th>Categoria</th>
        </thead>

        <tbody>
            @foreach (var item in ArticulosMostrados)
            {
                <tr>
                    <th><img src="@item.Imagen" width="60px" height="60px" /></th>
                    <th>@item.ArticuloId</th>
                    <th>@item.Descripcion</th>
                    <th>@item.Fecha.ToString("dd/MM/yyyy")</th>
                    <th>@item.Precio</th>
                    <th>@item.Existencia</th>
                    <th>@item.Categoria</th>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    public int Conteo { get; set; }
    public int Filtro { get; set; }
    public string? Criterio { get; set; }
    public Articulos articulos { get; set; } = new Articulos();
    public List<Articulos> L_Articulos { get; set; } = new List<Articulos>();
    public List<Articulos> ArticulosMostrados { get; set; } = new List<Articulos>();
    public DateTime FechaInicial { get; set; } = DateTime.Now.AddMonths(-1);
    public DateTime FechaFinal { get; set; } = DateTime.Now;
    private CancellationTokenSource? cancellationTokenSource;
    private TimeSpan retrasoDeBusqueda = TimeSpan.FromMilliseconds(200);

    protected override async Task OnInitializedAsync()
    {
        var articulo = await httpClient.GetFromJsonAsync<List<Articulos>>("api/Articulos");

        if (articulo is not null)
        {
            L_Articulos = articulo;
            ArticulosMostrados = L_Articulos;
        }
    }

    public void Buscar()
    {
        if(FechaFinal < FechaInicial)
        {
            notify.ShowNotification(titulo: "Error", mensaje: "La fecha final no puede ser mayor a la fecha inicial", NotificationSeverity.Warning);
            return;
        }

        if (!String.IsNullOrEmpty(Criterio))
        {
            switch (Filtro)
            {
                case 1:
                    {
                        if(int.TryParse(Criterio, out int ID))
                        {
                            ArticulosMostrados = L_Articulos.Where(a => a.ArticuloId == ID).ToList();
                        }
                        else
                        {
                            notify.ShowNotification(titulo: "Error", mensaje: "El criterio de busqueda para ID debe ser un numero valido", NotificationSeverity.Error);
                        }
                        break;
                    }

                case 2:
                    {
                        if(!double.TryParse(Criterio, out double _))
                        {
                            ArticulosMostrados = L_Articulos.Where(d => d.Descripcion != null &&
                            d.Descripcion.ToLower().Contains(Criterio.ToLower())).ToList();
                        }
                        else
                        {
                            notify.ShowNotification(titulo: "Error", mensaje: "El criterio de busqueda para descripcion no puede ser un numero", NotificationSeverity.Error);
                        }
                        break;
                    }

                case 3:
                    {
                        if(double.TryParse(Criterio, out double Precio))
                        {
                            ArticulosMostrados = L_Articulos.Where(p => p.Precio == Precio).ToList();
                        }
                        else
                        {
                            notify.ShowNotification(titulo: "Error", mensaje: "El criterio de busqueda para precio debe ser un numero valido", NotificationSeverity.Error);
                        }
                        break;
                    }

                case 4:
                    {
                        if(int.TryParse(Criterio, out int Existencia))
                        {
                            ArticulosMostrados = L_Articulos.Where(e => e.Existencia == Existencia).ToList();
                        }
                        else
                        {
                            notify.ShowNotification(titulo: "Error", mensaje: "El criterio de busqueda para existencia debe ser un numero valido", NotificationSeverity.Error);
                        }
                        break;
                    }

                case 5:
                    {
                        if(Criterio.All(char.IsDigit))
                        {
                            notify.ShowNotification(titulo: "Error", mensaje: "El criterio de busqueda para categoria no puede ser un numero", NotificationSeverity.Error);
                        }
                        else
                        {
                            ArticulosMostrados = L_Articulos.Where(c => c.Categoria != null && c.Categoria.ToLower().Contains(Criterio.ToLower())).ToList();
                        }
                        break;
                    }
            }
        }
        else
        {
            ArticulosMostrados = L_Articulos;
        }

        Conteo = L_Articulos != null ? L_Articulos!.Count() : 0;
        StateHasChanged();
    }

    private void ActualizarCriterio(ChangeEventArgs e)
    {
        Criterio = e.Value?.ToString();

        cancellationTokenSource?.Cancel();
        cancellationTokenSource = new CancellationTokenSource();
        var token = cancellationTokenSource.Token;
        _ = Task.Delay(retrasoDeBusqueda, token).ContinueWith(_ => Buscar(), token);
    }
}